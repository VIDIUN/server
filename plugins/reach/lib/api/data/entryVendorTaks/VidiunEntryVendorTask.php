<?php
/**
 * @package plugins.reach
 * @subpackage api.objects
 * @relatedService EntryVendorTaskService
 */
class VidiunEntryVendorTask extends VidiunObject implements IRelatedFilterable
{
	/**
	 * @var bigint
	 * @readonly
	 * @filter eq,in,order
	 */
	public $id;
	
	/**
	 * @var int
	 * @readonly
	 */
	public $partnerId;
	
	/**
	 * @var int
	 * @filter eq,in
	 * @readonly
	 */
	public $vendorPartnerId;
	
	/**
	 * @var time
	 * @readonly
	 * @filter gte,lte,order
	 */
	public $createdAt;
	
	/**
	 * @var time
	 * @readonly
	 * @filter gte,lte,order
	 */
	public $updatedAt;
	
	/**
	 * @var time
	 * @readonly
	 * @filter gte,lte,order
	 */
	public $queueTime;
	
	/**
	 * @var time
	 * @readonly
	 * @filter gte,lte,order
	 */
	public $finishTime;
	
	/**
	 * @var string
	 * @filter eq
	 * @insertonly
	 */
	public $entryId;
	
	/**
	 * @var VidiunEntryVendorTaskStatus
	 * @filter eq,in, order
	 * @requiresPermission insert, update
	 */
	public $status;
	
	/**
	 * The profile id from which this task base config is taken from
	 * @var int
	 * @filter eq,in
	 * @insertonly
	 */
	public $reachProfileId;
	
	/**
	 * The catalog item Id containing the task description 
	 * @var int
	 * @filter eq,in
	 * @insertonly
	 */
	public $catalogItemId;
	
	/**
	 * The charged price to execute this task
	 * @var float
	 * @filter order
	 * @readonly
	 */
	public $price;
	
	/**
	 * The ID of the user who created this task
	 * @var string
	 * @filter eq
	 * @readonly
	 */
	public $userId;
	
	/**
	 * The user ID that approved this task for execution (in case moderation is requested)
	 * @var string
	 * @readonly
	 */
	public $moderatingUser;
	
	/**
	 * Err description provided by provider in case job execution has failed
	 * @var string
	 * @requiresPermission insert, update
	 */
	public $errDescription;
	
	/**
	 * Access key generated by Vidiun to allow vendors to ingest the end result to the destination
	 * @var string
	 * @readonly
	 */
	public $accessKey;

	/**
	 * Vendor generated by Vidiun representing the entry vendor task version correlated to the entry version
	 * @var string
	 * @readonly
	 */
	public $version;
	
	/**
	 * User generated notes that should be taken into account by the vendor while executing the task
	 * @var string
	 */
	public $notes;

	/**
	 * @var string
	 * @readonly
	 */
	public $dictionary;
	
	/**
	 * Task context
	 * @var string
	 * @filter eq
	 */
	public $context;
	
	/**
	 * Task result accuracy percentage 
	 * @requiresPermission insert, update
	 * @var int
	 */
	public $accuracy;
	
	/**
	 * Task main object generated by executing the task
	 * @var string
	 * @requiresPermission insert, update
	 */
	public $outputObjectId;
	
	/**
	 * Json object containing extra task data required by the requester 
	 * @var string
	 */
	public $partnerData;
	
	/**
	 * Task creation mode
	 * @var VidiunEntryVendorTaskCreationMode
	 * @readonly
	 */
	public $creationMode;
	
	/**
	 * @var VidiunVendorTaskData
	 */
	public $taskJobData;

	private static $map_between_objects = array
	(
		'id',
		'partnerId',
		'vendorPartnerId',
		'createdAt',
		'updatedAt',
		'queueTime',
		'finishTime',
		'entryId',
		'status',
		'reachProfileId',
		'catalogItemId',
		'price',
		'userId',
		'moderatingUser',
		'errDescription',
		'accessKey',
		'notes',
		'version',
		'context',
		'accuracy',
		'outputObjectId',
		'dictionary',
		'partnerData',
		'creationMode',
		'taskJobData'
	);
	
	/* (non-PHPdoc)
	 * @see VidiunCuePoint::getMapBetweenObjects()
	 */
	public function getMapBetweenObjects()
	{
		return array_merge(parent::getMapBetweenObjects(), self::$map_between_objects);
	}
	
	/* (non-PHPdoc)
 	 * @see VidiunObject::toInsertableObject()
 	 */
	public function toInsertableObject($object_to_fill = null, $props_to_skip = array())
	{
		if (is_null($object_to_fill))
		{
			$object_to_fill = new EntryVendorTask();
		}
		
		return parent::toInsertableObject($object_to_fill, $props_to_skip);
	}
	
	public function validateForInsert($propertiesToSkip = array())
	{
		$this->validatePropertyNotNull("reachProfileId");
		$this->validatePropertyNotNull("catalogItemId");
		$this->validatePropertyNotNull("entryId");
		$this->validateEntryId();
		
		if($this->partnerData && !$this->checkIsValidJson($this->partnerData))
		{
			throw new VidiunAPIException(VidiunReachErrors::PARTNER_DATA_NOT_VALID_JSON_STRING);
		}
		
		if(isset($this->taskJobData))
		{
			$this->taskJobData->validateForInsert();
		}
		
		return parent::validateForInsert($propertiesToSkip);
	}
	
	public function validateForUpdate($sourceObject, $propertiesToSkip = array())
	{
		$closedStatuses = array(
			EntryVendorTaskStatus::ABORTED,
			EntryVendorTaskStatus::READY,
			EntryVendorTaskStatus::REJECTED,
			EntryVendorTaskStatus::ERROR,
		);
		
		/* @var $sourceObject EntryVendorTask */
		if($this->status && $this->status != $sourceObject->getStatus() && in_array($sourceObject->getStatus(), $closedStatuses))
		{
			throw new VidiunAPIException(VidiunReachErrors::CANNOT_UPDATE_STATUS_OF_TASK_WHICH_IS_IN_FINAL_STATE, $sourceObject->getId(), $sourceObject->getStatus(), $this->status);
		}
		
		if($this->partnerData && !$this->checkIsValidJson($this->partnerData))
		{
			throw new VidiunAPIException(VidiunReachErrors::PARTNER_DATA_NOT_VALID_JSON_STRING);
		}
		
		if(isset($this->taskJobData))
		{
			$this->taskJobData->validateForUpdate($sourceObject->getTaskJobData(), $propertiesToSkip);
		}
		
		return parent::validateForUpdate($sourceObject, $propertiesToSkip);
	}
	
	private function validateEntryId()
	{
		$dbEntry = entryPeer::retrieveByPK($this->entryId);
		if (!$dbEntry)
		{
			throw new VidiunAPIException(VidiunErrors::ENTRY_ID_NOT_FOUND, $this->entryId);
		}
		
		if($dbEntry->getStatus() != entryStatus::READY)
		{
			throw new VidiunAPIException(VidiunErrors::ENTRY_NOT_READY, $this->entryId);
		}
		
		if(!vReachUtils::isEntryTypeSupported($dbEntry->getType()))
		{
			throw new VidiunAPIException(VidiunReachErrors::ENTRY_TYPE_NOT_SUPPORTED, $dbEntry->getType());
		}
	}
	
	/* (non-PHPdoc)
	 * @see VidiunObject::fromObject()
	 */
	public function doFromObject($dbObject, VidiunDetachedResponseProfile $responseProfile = null)
	{
		/* @var $dbObject EntryVendorTask */
		parent::doFromObject($dbObject, $responseProfile);

		if ($this->shouldGet('taskJobData', $responseProfile) && !is_null($dbObject->getTaskJobData()))
		{
			$this->taskJobData = VidiunVendorTaskData::getInstance($dbObject->getTaskJobData(), $responseProfile);
		}
	}

	public function getExtraFilters()
	{
		return array();
	}
	
	public function getFilterDocs()
	{
		return array();
	}
	
	private function checkIsValidJson($string)
	{
		$json = json_decode($string);
		return (is_object($json) && json_last_error() == JSON_ERROR_NONE) ? true : false;
	}
}
